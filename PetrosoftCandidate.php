<?php
/**
 * Тестовое задание для кандидатов на должность PHP-разработчика
 *
 * Файл представляет собой шаблон для выполнения тестового задания. Все объявленные
 * методы должны быть реализованы непосредственно здесь. Создание дополнительных
 * собственных методов допускается.
 *
 * Код должен соответствовать стандартам кодирования Zend Framework (http://framework.zend.com/manual/1.12/ru/coding-standard.coding-style.html)
 * и работать без генерации предупреждений при включенном режиме error_reporting=E_ALL.
 *
 * После выполнения всех задач файл должен быть переименован в следующий формат:
 * <Date>-<LastName>.php
 *
 * Например, 20131216-Ivanov.php
 *
 * ВНИМАНИЕ!
 *     - На выполнение задания вы не должны тратить более двух-трех дней.
 *     - Файл должен содержать только класс.
 *
 * @version   20141118
 */
class PetrosoftCandidate 
{
    /**
     * Задание 1
     *
     * Из входного массива удалить все элементы, меньшие среднего значения по массиву.
     *
     * Для входного массива:
     * 6, 2, 7, 1, 3, 4, 5
     *
     * Среднее значение равно:
     * 4
     *
     * Следовательно, из входного массива удаляем все значения, которые меньше 4 и получаем:
     * 6, 7, 4, 5
     *
     * @param  array    $list Входной массив
     * @return array          Массив с отфильтрованными значениями
     */
    public function task1($list) 
    {
        $result = $list;
        
        if (!empty($list)) {
            $average = array_sum($list) / count($list);
            $result = array_filter($list, function ($value) use ($average) {
                return $value < $average ? false : true;
            });
        }
        
        return $result;
    }

    /**
     * Задание 2
     *
     * Написать функцию, рассчитывающую величину налога. На вход функция принимает величину дохода. Налог начисляется по следующему правилу:
     *
     * - если сумма дохода не превышает 500.00, то налог составляет 5% от нее
     * - если сумма не превышает 750.00, то налог составляет 5% на первые 500.00 и 10% на остаток
     * - если сумма не превышает 1500.00, то с первых 500.00 берем 5%, от 500.00 до 750.00 10% и 12.5% с того, что превышает 750.00
     * - если сумма больше 1500.00, то до 1500.00 начисляем по описанному выше правилу, а со всего, что больше берем 15%
     *
     * Например, если доход равен 680.00, то функция должна вернуть 43.00.
     *
     * @param  float   $income  Величина дохода
     * @return float            Сумма налога
     */
    public function task2($income) 
    {   
        $result = 0;
        $tax = function ($a, $b, $c, $d) {
            return 0.05 * $a + 0.1 * $b + 0.125 * $c + 0.15 * $d;
        };
        
        if ($income > 1500) {
            $result = $tax(500, 250, 750, $income - 1500);
        } elseif ($income > 750) {
            $result = $tax(500, 250, $income - 750, 0);
        } elseif ($income > 500) {
            $result = $tax(500, $income - 500, 0, 0);
        } else {
            $result = $tax($income, 0, 0, 0);
        }
        
        return round($result, 2);
    }

    /**
     * Задание 3
     *
     * Элементы, расположенные на главной диагонали квадратной матрицы отсортировать в порядке возрастания.
     *
     * Например, для входной матрицы:
     * 1 2 3 4
     * 5 6 7 8
     * 9 0 3 2
     * 5 2 4 2
     *
     * Должен быть возвращен результат:
     * 1 2 3 4
     * 5 2 7 8
     * 9 0 3 2
     * 5 2 4 6
     *
     * @param  array $matrix  Квадратная матрица
     * @return array          Матрица с отсортированной главной диагональю
     */
    public function task3($matrix) 
    {
        $n = count($matrix);
        
        for ($i = 1; $i < $n; $i++) {
            $j = $i;
            while ($j && $matrix[$j][$j] < $matrix[$j - 1][$j - 1]) {
                $tmp = $matrix[$j - 1][$j - 1];           
                $matrix[$j - 1][$j - 1] = $matrix[$j][$j];
                $matrix[$j][$j] = $tmp;
                
                $j--;
            }
        }
        
        return $matrix;
    }

    /**
     * Задание 4
     *
     * Сформировать одномерный массив, получающийся при чтении прямоугольной матрицы «змейкой по горизонтали», начиная
     * с верхнего левого элемента матрицы двигаться вправо. По достижении конца ряда «змейка» переходит на следующий и
     * начинает двигаться в обратном направлении.
     *
     * Например, для входной матрицы:
     *  1  2  3  4
     *  5  6  7  8
     *  9 10 11 12
     *
     * Должен быть возвращен результат:
     * 1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12
     *
     * @param  array $matrix  Входная прямоугольная матрица
     * @return array          Одномерный массив
     */
    public function task4($matrix) 
    {
        $result = array();
        $n = 0;
        
        foreach ($matrix as $i => $row) {
            if (empty($row)) {
                continue;
            }
            
            if (empty($n)) {
                $n = count($row) - 1;
            }
            
            $keys = $i % 2 ? range($n, 0) : range(0, $n);
            foreach ($keys as $j) {
                $result[] = $row[$j];
            }
        }
        
        return $result;
    }
}